{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Ps2vFoeeWKCN5KvwIDpJ5r1S8Z-eg5wX","timestamp":1669274094695}],"authorship_tag":"ABX9TyML+EHrK2vrANhBaCWpMVFn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# MODEL ONE"],"metadata":{"id":"LuDYBSu0WbwN"}},{"cell_type":"code","source":["# pip install networkx==2.3\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","import networkx as nx\n","import pandas as pd\n","import re\n","import numpy as np\n","from collections import Counter\n","import seaborn as sns\n","from sklearn.feature_extraction.text import CountVectorizer\n","import nltk \n","import string\n","plt.style.use('ggplot')\n","pd.set_option('display.max_colwidth', 100)\n","\n","import nltk\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","nltk.download('omw-1.4')\n","import nltk\n","\n","import tweepy\n","import csv\n","import sys\n","from importlib import reload\n","reload(sys)\n","\n","#nltk.download('stopwords')\n","ps = nltk.PorterStemmer()\n","string.punctuation\n","wn = nltk.WordNetLemmatizer()\n","\n","from nltk.corpus import stopwords\n","stopwords = stopwords.words('english')\n","#print(stop_words)\n","\n","#from nltk.corpus import stopwords\n","#stopword = nltk.corpus.stopwords.words('english')\n","\n","def remove_punct(text):\n","    text  = \"\".join([char for char in text if char not in string.punctuation])\n","    text = re.sub('[0-9]+', '', text)\n","    return text\n","\n","def tokenization(text):\n","    text = re.split('\\W+', text)\n","    return text\n","\n","def remove_stopwords(text):\n","    text = [word for word in text if word not in stopwords]\n","    return text\n","\n","def stemming(text):\n","    text = [ps.stem(word) for word in text]\n","    return text\n","def lemmatizer(text):\n","    text = [wn.lemmatize(word) for word in text]\n","    return text\n","\n","import re\n","def untokenize(words):\n","    \"\"\"\n","    Untokenizing a text undoes the tokenizing operation, restoring\n","    punctuation and spaces to the places that people expect them to be.\n","    Ideally, `untokenize(tokenize(text))` should be identical to `text`,\n","    except for line breaks.\n","    \"\"\"\n","    text = ' '.join(words)\n","    step1 = text.replace(\"`` \", '\"').replace(\" ''\", '\"').replace('. . .',  '...')\n","    step2 = step1.replace(\" ( \", \" (\").replace(\" ) \", \") \")\n","    step3 = re.sub(r' ([.,:;?!%]+)([ \\'\"`])', r\"\\1\\2\", step2)\n","    step4 = re.sub(r' ([.,:;?!%]+)$', r\"\\1\", step3)\n","    step5 = step4.replace(\" '\", \"'\").replace(\" n't\", \"n't\").replace(\n","         \"can not\", \"cannot\")\n","    step6 = step5.replace(\" ` \", \" '\")\n","    return step6.strip()\n","\n","# Mandatory attributes# Age of the account# Number of followers# Number of friends# Verified Status# Number of tweets\n","# Optional Attributes# Location# Number of lists# Has a bio\n","\n","def calculateAgeScore(age):\n","  if age <= 0:\n","    return 0\n","  elif age > 0 and age <= 6:\n","    return 1\n","  elif age > 6 and age <= 24:\n","    return 2\n","  elif age > 24 and age <= 60:\n","    return 3\n","  elif age > 60 and age <= 120:\n","    return 4\n","  elif age > 120:\n","    return 5\n","  else :\n","    return 0\n","\n","\n","def calculateFollowerRatioScore(row):\n"," if row['friends_count'] == 0:\n","  return 0\n","\n"," ratio = row['followers_count'] / row['friends_count']\n","\n"," if ratio < 0.5:\n","  return 0\n"," elif ratio >= 0.5 and ratio <= 1:\n","  return 1\n"," elif ratio > 1 and ratio <= 2:\n","  return 2\n"," elif ratio > 2 and ratio <= 5:\n","  return 3\n"," elif ratio > 5 and ratio <= 10:\n","  return 4\n"," elif ratio > 10:\n","  return 5\n"," else :\n","  return 0\n","\n","\n","def calculateVerifiedStatusScore(isVerified):\n"," if isVerified:\n","    return 5\n"," else :\n","    return 0\n","\n","def calculateLocationScore(location):\n"," if pd.isnull(location):\n","  return 0\n"," elif \"sri lanka\" in location.lower() or \"srilanka\" in location.lower() or \"colombo\" in location.lower():\n","  return 5\n"," elif pd.isnull(location) is False:\n","  return 4\n","\n","def calculateUserListsScore(lists):\n"," if lists < 2:\n","  return 0\n"," elif lists >= 2 and lists <= 10:\n","  return 1\n"," elif lists > 10 and lists <= 30:\n","  return 2\n"," elif lists > 30 and lists <= 60:\n","  return 3\n"," elif lists > 60 and lists <= 90:\n","  return 4\n"," elif lists > 90:\n","  return 5\n","\n","def calculateUserBioScore(bio):\n"," if pd.isnull(bio):\n","  return 0\n"," else :\n","  return 5\n","\n","def getNormalizedTrustScore(x):\n"," minX = 0\n"," maxX = 7.5\n"," return (x - minX) / maxX - minX\n","import datetime\n","from dateutil.parser import parse\n","from datetime import datetime\n","\n","def getAgeFromCreatedDate(date_str):\n","\n"," #start_date = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')\n"," start_date=date_str\n"," end_date = datetime(2019, 5, 20, 00, 00, 00)\n"," num_of_days=end_date -parse(start_date)\n"," num_months=num_of_days/30 \n"," #age=int(num_months)\n"," #num_months = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)\n"," #age= (num_months / np.timedelta64(1, 'D')).astype(int)\n"," return num_months\n","\n","\n","def calculateTweetCountScore(tweets):\n","  if tweets <= 10:\n","   return 0\n","  elif tweets > 10 and tweets <= 100:\n","   return 1\n","  elif tweets > 100 and tweets <= 1000:\n","   return 2\n","  elif tweets > 1000 and tweets <= 5000:\n","   return 3\n","  elif tweets > 5000 and tweets <= 10000:\n","   return 4\n","  elif tweets > 10000:\n","   return 5\n","  else :\n","   return 0\n","\n","\n","def getNormalizedTrustScore(x):\n"," minX = 0\n"," maxX = 7.5\n"," return (x - minX) / maxX - minX\n","\n","\n","def myfunc(csv_path):\n","    ordinary_tweets_data = pd.read_csv(csv_path)\n","    ordinary_tweets_data.columns = ordinary_tweets_data.columns.str.replace(' ','_')\n","    pattern='Colombo,Sri Lanka |Colombo, Sri Lanka|Sri Lanka| Srilanka ðŸ‡±ðŸ‡° |Colombo|Colombo, Srilanka|Colombo Sri Lanka|Sri Lankan'\n","    mask=ordinary_tweets_data['Tweet_Location'].str.contains(pattern,case=False,na=False)\n","    ordinary_tweets_data_mask=ordinary_tweets_data[mask]\n","    df  = pd.DataFrame(ordinary_tweets_data_mask[['Tweet_Id','Tweet_Type','User_Id','Name','Screen_Name', 'Tweet_Content','Retweets_Received','Favourites_Received',\n","                            'Verified_or_Non-Verified','User_Followers','User_Following','Favourites_Count','Statuses_Count',\n","                             'User_Account_Creation_Date','User_Bio','Tweet_Location','Tweet_Posted_Time_(UTC)','Protected_or_Non-protected']])\n","    df['User_Id_punct'] = df['User_Id'].apply(lambda x: x.replace('\"', ''))\n","    df['Tweet_Id_punct'] = df['Tweet_Id'].apply(lambda x: x.replace('\"', ''))\n","    pattern='Colombo,Sri Lanka |Colombo, Sri Lanka|Sri Lanka| Srilanka ðŸ‡±ðŸ‡° |Colombo|Colombo, Srilanka|Colombo Sri Lanka|Sri Lankan'\n","    mask=df['Tweet_Location'].str.contains(pattern,case=False,na=False)\n","    tweet_df=df[mask]\n","    model_1_dataset3=tweet_df.drop_duplicates(subset=['Screen_Name'])\n","\n","    model_1_result=model_1_dataset3[['User_Id', 'Name','Screen_Name']].copy()\n","    model_1_result['User_Id_punct'] = model_1_result['User_Id'].apply(lambda x: x.replace('\"', ''))\n","    model_1_dataset2=model_1_result[['User_Id_punct', 'Name','Screen_Name']].copy()\n","    model_1_dataset2.rename(columns = {'User_Id_punct':'User_Id'}, inplace = True)\n","    #### input your credentials here\n","    consumer_key = 'CQldZWCZjOPCmcuggVEYDLKb8'\n","    consumer_secret = 'rVGwBrR5PKxZs2yIpwPIbLP6TzhARo7C4cRodrCKVFSEGTOOWi'\n","    access_token = '1506450127057305604-XjukkZt3QPyCQ8oZTRC4qpQnglQu4u'\n","    access_token_secret = 'xY7v8pWdKZaQcGGVokNQIwgwoiMSlmZlbn6nWAaytJxN2'\n","    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n","    auth.set_access_token(access_token, access_token_secret)\n","    api = tweepy.API(auth, wait_on_rate_limit = True)\n","    import json\n","    col_list = model_1_dataset2['Screen_Name'].tolist()\n","    col_list.remove('dula_aluthge')\n","    col_list.remove('SukyT91')\n","    col_list.remove('cpaolag')\n","    list = []\n","    for item in col_list:\n","        #x='\"{}\"'.format(item)\n","        users = api.lookup_users(screen_name =item)\n","        \n","\n","        \n","        for user in users:\n","      #text = user._json[\"full_text\"]\n","    \n","          refined_tweet = {'screen_name' : user.screen_name,\n","                      'User_Id' : user.id,\n","                      'Name':user.name,\n","                      'followers_count' : user.followers_count,\n","                      'friends_count' : user.friends_count,\n","                      'created_at' : user.created_at,\n","                      'statuses_count' : user.statuses_count,\n","                      'listed_count' : user.listed_count, \n","                      'location' : user.location,\n","                      'verified' : user.verified,\n","                      'User_Bio':user.description}\n","      \n","          list.append(refined_tweet)\n","\n","\n","    ordinary_tweets_users = pd.DataFrame(list)\n","    model1_data=ordinary_tweets_users.copy()\n","    model1_data['created_at']=model1_data['created_at'].astype(str).str[:30]   \n","    model_1_result=model1_data[['User_Id', 'Name']].copy()\n","\n","    # Mandatory attributes# Age of the account# Number of followers# Number of friends# Verified Status# Number of tweets\n","    # Optional Attributes# Location# Number of lists# Has a bio\n","\n","    # Mandatory attributes#\n","    model_1_result['verifiedStatus'] = model1_data['verified'].apply(calculateVerifiedStatusScore)\n","\n","    model_1_result['getAgeFromCreatedDate'] = model1_data['created_at'].apply(getAgeFromCreatedDate)\n","    model_1_result['getAgeFromCreatedDate'] = pd.to_numeric(model_1_result['getAgeFromCreatedDate'].dt.days, downcast='integer')\n","    model_1_result['calculateAgeScore'] = model_1_result['getAgeFromCreatedDate'].apply(calculateAgeScore)\n","\n","    model_1_result['followerRatioScore'] =model1_data.apply(lambda row:calculateFollowerRatioScore(row), axis=1)\n","\n","    model_1_result['tweetCountScore'] =  model1_data['statuses_count'].apply(calculateTweetCountScore)\n","\n","\n","\n","    #Optional Attributes#\n","    model_1_result['User_Bio'] = model1_data['User_Bio'].apply(calculateUserBioScore)\n","    model_1_result['user_location'] = model1_data['location'].apply(calculateLocationScore)\n","    model_1_result['listCountScore'] = model1_data['listed_count'].apply(calculateUserListsScore)  \n","\n","    weighted_mandatory_trust_score = 0\n","    mandatory_attribute_weight = 1\n","    weighted_mandatory_trust_score = 0\n","    mandatory_attribute_weight = 1\n","    model_1_result= model_1_result.eval('weighted_optional_trust_score =0+(User_Bio *0.5 +user_location*0.5+listCountScore*0.5)/3')\n","    model_1_result= model_1_result.eval('weighted_mandatory_trust_score =0+(verifiedStatus *1 +calculateAgeScore*1+followerRatioScore*1+tweetCountScore*1)/4')\n","    model_1_result=model_1_result.eval('final_weighted_score=0+weighted_optional_trust_score+weighted_mandatory_trust_score')\n","\n","    ## convert to 0-1 value\n","    model_1_result['normalized_final_weighted_score'] = model_1_result['final_weighted_score'].apply(getNormalizedTrustScore)\n","    model_1_result1 =model_1_result[['User_Id','Name','weighted_mandatory_trust_score','weighted_optional_trust_score','final_weighted_score']].copy()\n","    model_1_result2 =model_1_result[['User_Id','Name','normalized_final_weighted_score']].copy()\n","    return model_1_result2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MuFnbsOCPVx2","executionInfo":{"status":"ok","timestamp":1669271750711,"user_tz":-330,"elapsed":2080,"user":{"displayName":"Nadeeka Kiringoda","userId":"02230049152691302065"}},"outputId":"0a4e5432-9efb-4ed1-f1d5-1153aae0405e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n","[nltk_data]   Package omw-1.4 is already up-to-date!\n"]}]},{"cell_type":"markdown","source":["# MODEL TWO"],"metadata":{"id":"qpROeSDbc-jp"}},{"cell_type":"code","source":["pip install fasttext\n","from scipy.spatial.distance import cosine\n","import numpy as np\n","import fasttext\n","import fasttext.util\n","!gunzip \"gdrive/My Drive/Colab Notebooks/cc.en.300.bin.gz\" -d \"gdrive/My Drive/Colab Notebooks/cc.en.300.bin\"\n","model = fasttext.load_model('gdrive/My Drive/Colab Notebooks/cc.en.300.bin')"],"metadata":{"id":"of-NRHmKc91T"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# CALLING TO THE MODEL"],"metadata":{"id":"9ID9NclwWiUE"}},{"cell_type":"code","source":["\n","\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","\n","root_path = 'gdrive/My Drive/Colab Notebooks/'\n","\n","myfunc('gdrive/My Drive/Colab Notebooks/srilanka_easter.csv')\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"x_9_-KsPQJYJ","executionInfo":{"status":"ok","timestamp":1669272014833,"user_tz":-330,"elapsed":24055,"user":{"displayName":"Nadeeka Kiringoda","userId":"02230049152691302065"}},"outputId":"4ef429fb-e607-47cc-aad7-bc2df59e2821"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]},{"output_type":"execute_result","data":{"text/plain":["                 User_Id                 Name  normalized_final_weighted_score\n","0             1951067186  Chandani Kirinde 🇱🇰                         0.766667\n","1                9909452       Vipulananda 🇱🇰                         0.700000\n","2     957681564284006401       Asiri Fernando                         0.533333\n","3    1100241609721958400          Lankanenews                         0.355556\n","4             1869917396    Wasitha Pinnawala                         0.400000\n","..                   ...                  ...                              ...\n","117             18893698   Loshan - ARVLOSHAN                         0.811111\n","118   771971709951995904        Mariesz Cader                         0.444444\n","119            100192159     Embark Sri Lanka                         0.744444\n","120             63481751   Prishan Pandithage                         0.455556\n","121           1411941818      MFA SriLanka 🇱🇰                         0.933333\n","\n","[122 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-193da5cb-db85-46d9-b4da-746d3b20e99b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User_Id</th>\n","      <th>Name</th>\n","      <th>normalized_final_weighted_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1951067186</td>\n","      <td>Chandani Kirinde 🇱🇰</td>\n","      <td>0.766667</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9909452</td>\n","      <td>Vipulananda 🇱🇰</td>\n","      <td>0.700000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>957681564284006401</td>\n","      <td>Asiri Fernando</td>\n","      <td>0.533333</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1100241609721958400</td>\n","      <td>Lankanenews</td>\n","      <td>0.355556</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1869917396</td>\n","      <td>Wasitha Pinnawala</td>\n","      <td>0.400000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>117</th>\n","      <td>18893698</td>\n","      <td>Loshan - ARVLOSHAN</td>\n","      <td>0.811111</td>\n","    </tr>\n","    <tr>\n","      <th>118</th>\n","      <td>771971709951995904</td>\n","      <td>Mariesz Cader</td>\n","      <td>0.444444</td>\n","    </tr>\n","    <tr>\n","      <th>119</th>\n","      <td>100192159</td>\n","      <td>Embark Sri Lanka</td>\n","      <td>0.744444</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>63481751</td>\n","      <td>Prishan Pandithage</td>\n","      <td>0.455556</td>\n","    </tr>\n","    <tr>\n","      <th>121</th>\n","      <td>1411941818</td>\n","      <td>MFA SriLanka 🇱🇰</td>\n","      <td>0.933333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>122 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-193da5cb-db85-46d9-b4da-746d3b20e99b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-193da5cb-db85-46d9-b4da-746d3b20e99b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-193da5cb-db85-46d9-b4da-746d3b20e99b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]}]}